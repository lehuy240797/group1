<?php

namespace App\Services;

use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;

class ChatbotService
{
    /**
     * T√¨m tour ph√π h·ª£p d·ª±a tr√™n input c·ªßa ng∆∞·ªùi d√πng.
     * Ho·∫∑c tr·∫£ v·ªÅ danh s√°ch t·∫•t c·∫£ tour n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu.
     *
     * @param string $userInput
     * @return array|object|null Tr·∫£ v·ªÅ m·ªôt m·∫£ng ch·ª©a d·ªØ li·ªáu (text, tour_id, tours_list, quick_replies)
     * ho·∫∑c m·ªôt object tour (n·∫øu t√¨m th·∫•y 1 tour c·ª• th·ªÉ), ho·∫∑c null.
     */
    public function findMatchingTour(string $userInput)
    {
        $normalizedUserInput = trim(mb_strtolower($this->removeVietnameseAccents($userInput), 'UTF-8'));

        // --- Logic x·ª≠ l√Ω y√™u c·∫ßu G·ª¨I Y√äU C·∫¶U G·ªåI L·∫†I ---
        if (str_contains($normalizedUserInput, 'gui yeu cau goi lai') ||
            str_contains($normalizedUserInput, 'muon duoc goi lai') ||
            str_contains($normalizedUserInput, 'noi chuyen voi nhan vien') ||
            str_contains($normalizedUserInput, 'can tu van them')) {

            Log::info("User requested a callback.");
            return [
                'text' => "Vui l√≤ng ƒëi·ªÅn th√¥ng tin c·ªßa b·∫°n v√†o bi·ªÉu m·∫´u b√™n d∆∞·ªõi, ch√∫ng t√¥i s·∫Ω li√™n h·ªá l·∫°i s·ªõm nh·∫•t c√≥ th·ªÉ!",
                'request_callback_form' => true,
                'quick_replies' => [
                   
                ]
            ];
        }

        // --- Logic ∆∞u ti√™n: X·ª≠ l√Ω y√™u c·∫ßu "t·∫•t c·∫£ tour hi·ªán c√≥" ---
        if (str_contains($normalizedUserInput, 'tat ca tour hien co') ||
            str_contains($normalizedUserInput, 'danh sach tour') ||
            str_contains($normalizedUserInput, 'show tour') ||
            str_contains($normalizedUserInput, 'xem tat ca tour')) {
            $allTours = DB::table('available_tours')->get();
            if ($allTours->isEmpty()) {
                return [
                    'text' => "Hi·ªán t·∫°i ch∆∞a c√≥ tour n√†o. Vui l√≤ng quay l·∫°i sau nh√©!",
                    'tours_list' => [],
                    'quick_replies' => [
                        ['text' => 'Li√™n h·ªá t∆∞ v·∫•n', 'value' => 't√¥i mu·ªën n√≥i chuy·ªán v·ªõi nh√¢n vi√™n']
                    ]
                ];
            } else {
                $quickReplies = [];
                $count = 0;
                foreach ($allTours as $tour) {
                    if ($count < 5) {
                        $quickReplies[] = ['text' => $tour->name_tour, 'value' => $tour->name_tour];
                        $count++;
                    } else {
                        break;
                    }
                }
                $quickReplies[] = ['text' => 'Li√™n h·ªá t∆∞ v·∫•n', 'value' => 't√¥i mu·ªën n√≥i chuy·ªán v·ªõi nh√¢n vi√™n'];

                return [
                    'text' => "D∆∞·ªõi ƒë√¢y l√† m·ªôt s·ªë tour hi·ªán c√≥:",
                    'tours_list' => $allTours->toArray(),
                   'quick_replies' => $quickReplies
                ];
            }
        }

        // --- Logic t√¨m ki·∫øm tour c·ª• th·ªÉ ---
        $tour = null;
        $tour = $this->findTourByName($userInput);
        if (!$tour) {
            $tour = $this->findTourByPrice($userInput);
        }
        if (!$tour) {
            $tour = $this->findTourByLocation($userInput);
        }
        
        // Th√™m m·ªôt ƒëi·ªÅu ki·ªán t√¨m ki·∫øm chung n·∫øu c√°c h√†m tr√™n kh√¥ng t√¨m th·∫•y
        if (!$tour && strlen($userInput) > 2) {
            $tour = DB::table('available_tours')
                        ->where('name_tour', 'like', "%{$userInput}%")
                        ->orWhere('location', 'like', "%{$userInput}%")
                        ->first();
        }

        return $tour;
    }

    /**
     * Lo·∫°i b·ªè d·∫•u ti·∫øng Vi·ªát kh·ªèi chu·ªói.
     *
     * @param string $str
     * @return string
     */
    protected function removeVietnameseAccents(string $str): string
    {
        $unicode = [
            'a' => '√°|√†|·∫£|√£|·∫°|ƒÉ|·∫Ø|·∫±|·∫≥|·∫µ|·∫∑|√¢|·∫•|·∫ß|·∫©|·∫´|·∫≠',
            'd' => 'ƒë', 'e' => '√©|√®|·∫ª|·∫Ω|·∫π|√™|·∫ø|·ªÅ|·ªÉ|·ªÖ|·ªá',
            'i' => '√≠|√¨|·ªâ|ƒ©|·ªã', 'o' => '√≥|√≤|·ªè|√µ|·ªç|√¥|·ªë|·ªì|·ªï|·ªó|·ªô|∆°|·ªõ|·ªù|·ªü|·ª°|·ª£',
            'u' => '√∫|√π|·ªß|≈©|·ª•|∆∞|·ª©|·ª´|·ª≠|·ªØ|·ª±', 'y' => '√Ω|·ª≥|·ª∑|·ªπ|·ªµ',
            'A' => '√Å|√Ä|·∫¢|√É|·∫†|ƒÇ|·∫Æ|·∫∞|·∫≤|·∫¥|·∫∂|√Ç|·∫§|·∫¶|·∫®|·∫™|·∫¨',
            'D' => 'ƒê', 'E' => '√â|√à|·∫∫|·∫º|·∫∏|√ä|·∫æ|·ªÄ|·ªÇ|·ªÑ|·ªÜ',
            'I' => '√ç|√å|·ªà|ƒ®|·ªä', 'O' => '√ì|√í|·ªé|√ï|·ªå|√î|·ªê|·ªí|·ªî|·ªñ|·ªò|∆†|·ªö|·ªú|·ªû|·ª†|·ª¢',
            'U' => '√ö|√ô|·ª¶|≈®|·ª§|∆Ø|·ª®|·ª™|·ª¨|·ªÆ|·ª∞', 'Y' => '√ù|·ª≤|·ª∂|·ª∏|·ª¥',
        ];
        foreach ($unicode as $nonUnicode => $uni) {
            $str = preg_replace("/($uni)/i", $nonUnicode, $str);
        }
        return $str;
    }

    /**
     * T√¨m tour theo t√™n t·ª´ input c·ªßa ng∆∞·ªùi d√πng.
     *
     * @param string $userInput
     * @return object|null
     */
    protected function findTourByName(string $userInput)
    {
        $normalizedUserInput = mb_strtolower($this->removeVietnameseAccents($userInput), 'UTF-8');

        if (preg_match('/(?:tour|t√™n|chuy·∫øn ƒëi)\s+([\p{L}\s]+)/ui', $userInput, $matches)) {
            $name = trim($matches[1]);
            $normalizedName = $this->removeVietnameseAccents(mb_strtolower($name, 'UTF-8'));

            return DB::table('available_tours')
                ->where('name_tour', 'like', "%{$name}%")
                ->orWhere('name_tour', 'like', "%{$normalizedName}%")
                ->first();
        }
        return null;
    }

    /**
     * T√¨m tour theo ƒëi·ªÉm ƒë·∫øn t·ª´ input c·ªßa ng∆∞·ªùi d√πng.
     *
     * @param string $userInput
     * @return object|null
     */
    protected function findTourByLocation(string $userInput)
    {
        $normalizedUserInput = mb_strtolower($this->removeVietnameseAccents($userInput), 'UTF-8');

        if (preg_match('/(ƒëi·ªÉm ƒë·∫øn|·ªü)\s*([\p{L}\s]+)/ui', $userInput, $matches)) {
            $location = trim($matches[2]);
            $normalizedLocation = $this->removeVietnameseAccents(mb_strtolower($location, 'UTF-8'));
            return DB::table('available_tours')
                           ->where('location', 'like', "%{$location}%")
                           ->orWhere('location', 'like', "%{$normalizedLocation}%")
                           ->first();
        } elseif (strlen($userInput) > 2) {
            return DB::table('available_tours')
                           ->where('location', 'like', "%{$userInput}%")
                           ->orWhere('location', 'like', "%{$normalizedUserInput}%")
                           ->first();
        }
        return null;
    }

    /**
     * ƒê·ªãnh d·∫°ng th√¥ng tin tour ƒë·ªÉ tr·∫£ l·ªùi ng∆∞·ªùi d√πng v√† bao g·ªìm ID tour.
     *
     * @param object $tour
     * @return array
     */
    public function formatTourReply(object $tour): array
    {
        $replyText = "‚úÖ T√™n tour: {$tour->name_tour}\nüèñ ƒêi·ªÉm ƒë·∫øn: {$tour->location}\nüí∞ Gi√°: " . number_format($tour->price, 0, ',', '.') . " VND\nüìå M√¥ t·∫£: {$tour->description}";

        return [
            'text' => $replyText,
            'tour_id' => $tour->id,
            'quick_replies' => [
                ['text' => 'Xem tour kh√°c', 'value' => 't·∫•t c·∫£ tour hi·ªán c√≥'],
                ['text' => 'Li√™n h·ªá t∆∞ v·∫•n', 'value' => 't√¥i mu·ªën n√≥i chuy·ªán v·ªõi nh√¢n vi√™n'],
            ]
        ];
    }

    /**
     * Chuy·ªÉn ƒë·ªïi gi√° tr·ªã chu·ªói th√†nh s·ªë th·ª±c, c√≥ x·ª≠ l√Ω ƒë∆°n v·ªã (tri·ªáu, ngh√¨n).
     *
     * @param string $value
     * @param string|null $unit
     * @return float
     */
    protected function parsePriceValue(string $value, ?string $unit = null): float
    {
        $cleanValue = (float)str_replace(['.', ','], '', $value);
        $normalizedUnit = mb_strtolower(isset($unit) ? $unit : '', 'UTF-8');

        Log::info("Parsing price: value='{$value}', unit='" . (isset($unit) ? $unit : 'null') . "'");

        $parsedPrice = 0;

        switch ($normalizedUnit) {
            case 'tri·ªáu':
                $parsedPrice = $cleanValue * 1_000_000;
                break;
            case 'ngh√¨n':
                $parsedPrice = $cleanValue * 1_000;
                break;
            default:
                $parsedPrice = $cleanValue;
                break;
        }

        Log::info("Parsed price result: " . $parsedPrice);
        return $parsedPrice;
    }

    /**
     * T√¨m tour theo c√°c ti√™u ch√≠ gi√° t·ª´ input c·ªßa ng∆∞·ªùi d√πng.
     *
     * @param string $userInput
     * @return object|null
     */
    protected function findTourByPrice(string $userInput)
    {
        Log::info("findTourByPrice called with userInput: " . $userInput);

        if (stripos($userInput, 'gi√°') === false && stripos($userInput, 'kho·∫£ng gi√°') === false &&
            stripos($userInput, 'm·ª©c gi√°') === false && stripos($userInput, 't·∫ßm') === false &&
            stripos($userInput, 'd∆∞·ªõi') === false && stripos($userInput, 'tr√™n') === false &&
            stripos($userInput, 't·ªëi ƒëa') === false && stripos($userInput, 't·ªëi thi·ªÉu') === false &&
            stripos($userInput, 'ngh√¨n') === false && stripos($userInput, 'tri·ªáu') === false) {
            return null;
        }

        $query = DB::table('available_tours');
        $foundPriceCriteria = false;
        $orderDirection = null;
        $targetPrice = null;

        $comparisonPatterns = [
            '/(?:th·∫•p h∆°n|d∆∞·ªõi|t·ªëi ƒëa|b√© h∆°n)\s*([\d.,]+)\s*(tri·ªáu|ngh√¨n)?/ui' => function($v, $u) use (&$query, &$foundPriceCriteria, &$orderDirection, &$targetPrice) {
                $price = $this->parsePriceValue($v, $u);
                Log::info("Applying WHERE price < " . $price);
                $query->where('price', '<', $price);
                $foundPriceCriteria = true;
                $orderDirection = 'DESC';
                $targetPrice = $price;
            },
            '/(?:cao h∆°n|tr√™n|h∆°n|t·ªëi thi·ªÉu|√≠t nh·∫•t)\s*([\d.,]+)\s*(tri·ªáu|ngh√¨n)?/ui' => function($v, $u) use (&$query, &$foundPriceCriteria, &$orderDirection, &$targetPrice) {
                $price = $this->parsePriceValue($v, $u);
                Log::info("Applying WHERE price > " . $price);
                $query->where('price', '>', $price);
                $foundPriceCriteria = true;
                $orderDirection = 'ASC';
                $targetPrice = $price;
            },
        ];

        $rangePatterns = [
            '/t·ª´ ([\d.,]+)\s*(?:tri·ªáu|ngh√¨n)? ƒë·∫øn ([\d.,]+)\s*(?:tri·ªáu|ngh√¨n)?/ui' => function($v1, $u1, $v2 = null, $u2 = null) use (&$query, &$foundPriceCriteria, &$orderDirection, &$targetPrice) {
                $minPriceInput = $this->parsePriceValue($v1, $u1);
                $maxPriceInput = $this->parsePriceValue($v2 ?: $v1, $u2 ?: $u1);

                $targetMin = min($minPriceInput, $maxPriceInput);
                $targetMax = max($minPriceInput, $maxPriceInput);

                $range = 1_000_000;

                $finalMin = max(0, $targetMin - $range);
                $finalMax = $targetMax + $range;
                Log::info("Applying WHERE BETWEEN price " . $finalMin . " AND " . $finalMax);
                $query->whereBetween('price', [$finalMin, $finalMax]);
                $foundPriceCriteria = true;
                $targetPrice = ($finalMin + $finalMax) / 2;
                $orderDirection = 'ASC';
            },
            '/kho·∫£ng ([\d.,]+)\s*[-‚Äì]\s*([\d.,]+)\s*(tri·ªáu|ngh√¨n)?/ui' => function($v1, $v2, $u = null) use (&$query, &$foundPriceCriteria, &$orderDirection, &$targetPrice) {
                $minPriceInput = $this->parsePriceValue($v1, $u);
                $maxPriceInput = $this->parsePriceValue($v2, $u);

                $targetMin = min($minPriceInput, $maxPriceInput);
                $targetMax = max($minPriceInput, $maxPriceInput);

                $range = 1_000_000;

                $finalMin = max(0, $targetMin - $range);
                $finalMax = $targetMax + $range;
                Log::info("Applying WHERE BETWEEN price " . $finalMin . " AND " . $finalMax);
                $query->whereBetween('price', [$finalMin, $finalMax]);
                $foundPriceCriteria = true;
                $targetPrice = ($finalMin + $finalMax) / 2;
                $orderDirection = 'ASC';
            },
        ];

        $generalPricePatterns = [
            '/(?:kho·∫£ng|gi√°|m·ª©c gi√°|t·∫ßm)?\s*([\d.,]+)\s*(tri·ªáu|ngh√¨n)?/ui' => function($v, $u) use (&$query, &$foundPriceCriteria, &$orderDirection, &$targetPrice) {
                $val = $this->parsePriceValue($v, $u);
                $range = 1_000_000;

                $minPrice = max(0, $val - $range);
                $maxPrice = $val + $range;
                Log::info("Applying WHERE BETWEEN price " . $minPrice . " AND " . $maxPrice);
                $query->whereBetween('price', [$minPrice, $maxPrice]);
                $foundPriceCriteria = true;
                $targetPrice = $val;
                $orderDirection = 'ASC';
            },
        ];

        $allPatterns = array_merge($comparisonPatterns, $rangePatterns, $generalPricePatterns);

        foreach ($allPatterns as $pattern => $action) {
            if (preg_match($pattern, $userInput, $matches)) {
                Log::info("Matched pattern: " . $pattern);
                Log::info("Regex matches: " . json_encode(array_slice($matches, 1)));

                $action(...array_slice($matches, 1));
                if ($foundPriceCriteria) {
                    if ($targetPrice !== null) {
                        if ($orderDirection === 'ASC' || $orderDirection === 'DESC') {
                            $query->orderBy('price', $orderDirection);
                        } else {
                            $query->orderBy(DB::raw("ABS(price - {$targetPrice})"), 'ASC');
                        }
                    }

                    Log::info("Final Query SQL: " . $query->toSql());
                    Log::info("Final Query Bindings: " . json_encode($query->getBindings()));

                    $result = $query->first();
                    Log::info("Query Result: " . json_encode($result));
                    return $result;
                }
            }
        }
        Log::info("No tour found based on price criteria for input: " . $userInput);
        return null;
    }
}